#!/bin/bash
donotbuild=('gtk-update-icon-cache' 'gcc-libs' 'sh' 'libsysprof-capture' 'util-linux-libs' 'systemd-libs' 'glibc')

echo "TEST" && sleep 3
git config --global url."https://bitbucket.org".insteadOf git+https://bitbucket.org

export DIBAB_PREFIX=$HOME
export SRC_PATH=$PWD

export TMPDIR=$HOME/tmp

install -d $HOME/tmp
install -d $HOME/$CARCH/share/aclocal
[ ! -e $HOME/$MODULE/share/aclocal ] && install -d $HOME/$MODULE/share/aclocal
install -d $HOME/ydfs/src
install -d $HOME/ydfs/tarballs

install -d $HOME/ydfs/CFLAGS
install -d $HOME/ydfs/CPPFLAGS
install -d $HOME/ydfs/CPPFLAGS

[ "$CARCH" = "x86_64" ] && [ ! -e $HOME/$CARCH/lib64 ] && install -d $HOME/$CARCH/lib && ln -s $HOME/$CARCH/lib $HOME/$CARCH/lib64

MODULE=$1
echo $SRC_PATH/list-$MODULE

loop=0

function build_from_url
{
  PKGNAME=$(basename $PKGURL_URL | cut -d'-' -f1)
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/packages/$PKGNAME ] && echo "$HOME/ydfs/packages/$PKGNAME exists" && continue
  DIRNAME=`basename $PKGURL_URL |sed "s/.tar.xz//" | sed "s/.tar.bz2//" | sed "s/.tar.gz//"`
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/src/$DIRNAME/distinstall.done ] && echo "distinstall.done" && continue
  FIRST=`echo $PKGURL | head -c1`
  [ "$FIRST" = '#' ] && continue
  echo "$ARCHIVE" | grep '#tag' >/dev/null || echo "$ARCHIVE" | grep '#commit' >/dev/null || ARCHIVE=`echo $ARCHIVE|cut -d'#' -f1`
  [ "$CARCH" = "x86_64" ] && PKGURL=`echo $PKGURL | sed "s/_i386.deb/_amd64.deb/"`
  [ "$CARCH" = "x86_64" ] && PKGURL=`echo $PKGURL | sed "s/i586.deb/amd64.deb/"`
  export PKGSRC=$PKGURL
  # echo " $PKGURL "
  export PREFIX=$DIBAB_PREFIX/$MODULE/
  if [  -n "`echo $PKGURL | grep 'git://'`" ] || [  -n "`echo $PKGURL | grep 'opkg-gtk2.git'`" ] || [  -n "`echo $PKGURL | grep 'git+https://'`" ]  
  then
    PKGURL=`echo $PKGURL |cut -d'?' -f1`
    cd $HOME/ydfs/src
    SOURCE_DIR=`basename $PKGURL | cut -d'.' -f1 | cut -d'#' -f1`
    [ ! -e $SOURCE_DIR ] && git clone `echo $PKGURL | sed "s/git+https/https/" | cut -d'#' -f1` 
    cd $SOURCE_DIR
    echo "DEBUG ARCHIVE = $ARCHIVE"
    TAG=`echo $ARCHIVE | grep '#tag' | cut -d'=' -f2`
    COMMIT=`echo $ARCHIVE | grep '#commit' | cut -d'=' -f2`
    if [ "$TAG" != "" ]
    then
	echo "Tag is $TAG"
	git checkout tags/$TAG || exit 1
    fi
    [ "$COMMIT" != "" ] && echo "At commit $COMMIT" &&  git checkout  $COMMIT && sleep 5
    $HOME_DIBAB/scripts/build_from_source $DIBAB_PREFIX/$MODULE || touch $HOME/ydfs-error
    [ -e $HOME/ydfs-error ] && echo "Exit $PKGURL " && cat $HOME/ydfs-error && exit 1 
    return 0
  fi
  if [  -n "`echo $PKGURL | grep 'pip::'`" ] 
  then
    modpython=`echo $PKGURL | cut -d ':' -f3` 
    echo "Run  pip install $modpython" 
#    python3.8 -m pip install --upgrade pip setuptools wheel
	  pip3 install $modpython || touch $HOME/ydfs-error
    [ -e $HOME/ydfs-error ] && echo "Exit $PKGURL " && break
    return 0
  fi
  if [  -n "`echo $PKGURL | grep 'CPAN:/'`" ] 
  then
    modperl=`echo $PKGURL | cut -d '/' -f2` 
    echo "Run  db-build-modperl $modperl" 
    SDL_INC=$HOME/$CARCH/include SDL_LIB=$HOME/$CARCH/lib db-build-modperl $modperl || touch $HOME/ydfs-error
    [ -e $HOME/ydfs-error ] && echo "Exit $PKGURL " && break
    return 0
  fi
  if [ -e $HOME/ydfs/tarballs/`basename $PKGURL` ]
  then
    test -s $HOME/ydfs/tarballs/`basename $PKGURL` || rm $HOME/ydfs/tarballs/`basename $PKGURL`
  fi
  echo "$PKGURL" | grep '::' >/dev/null && PKGURL=`echo $PKGURL | cut -d':' -f3,4`
  [ -e $HOME/ydfs/tarballs/`basename $PKGURL`.start ] && [ -e $HOME/ydfs/tarballs/`basename $PKGURL` ] && rm $HOME/ydfs/tarballs/`basename $PKGURL`
  [ ! -e $HOME/ydfs/tarballs/`basename $PKGURL` ] && touch $HOME/ydfs/tarballs/`basename $PKGURL`.start && echo "Get $PKGURL" && wget --trust-server-name -q --tries=5 -w 6 --no-check-certificate --output-document=$HOME/ydfs/tarballs/`basename $PKGURL` $PKGURL && rm $HOME/ydfs/tarballs/`basename $PKGURL`.start
  test -s $HOME/ydfs/tarballs/`basename $PKGURL` || rm $HOME/ydfs/tarballs/`basename $PKGURL`
  [ ! -e $HOME/ydfs/tarballs/`basename $PKGURL` ] && echo "`basename $PKGURL` not found " && touch $HOME/ydfs-error
  [ -e $HOME/ydfs-error ] && echo "Exit $PKGURL " && exit 24
  echo -n  "BUILDING $PACKAGE_NAME .. "
  $HOME_DIBAB/scripts/build_archive $HOME/ydfs/tarballs/`basename $PKGURL` || touch $HOME/ydfs-error
  [ -e $HOME/ydfs-error ] && echo -e "\n\n Log : \n " && tail -10 $(cat $HOME/ydfs/.last-log) # && echo -n "full log is " && cat $HOME/ydfs/.last-error
  [ -e $HOME/ydfs-error ] && echo -e "\n Error : \n " && tail -10 $(cat $HOME/ydfs/.last-error) # && echo -n "full log is " && cat $HOME/ydfs/.last-error
  [ -e $HOME/ydfs-error ] && echo " Failed !" && echo "Exit $0 $PKGURL " && exit 23
  [ -e $HOME/ydfs-error ] && exit 1
}

function get_child_pkg
{
  depends=$@
	# echo "LEVEL : $LEVEL"
  	#echo "DEPS $depends"
  	   # [ ${#depends[@]} = 0 ] && echo "no deps 3" !
  	   ready_to_build $depends
	   if [ $? = 0 ]
	   then
  		echo "DEBUG $HOME_DIBAB/scripts/echo-archpkg $d"
  		PKGURL=`$HOME_DIBAB/scripts/echo-archpkg $d`
		echo
		export PACK=$d
		echo "Ready to build $PKGURL !"
		build_from_url 
	   fi

  	   for pkg in ${depends[@]}
	   do
		   export LEVEL=$loop
	     get_alias $pkg
	     d=$pkg
  	     [ -e $HOME/archpkg/$d ] && continue
	     get_special_pkg $d && continue 
	     # echo "Depends3: $d"; 
	     echo -n " $d"
	     if [ ! -e $HOME/archpkg/$d ]
	     then
  	      $HOME_DIBAB/scripts/echo-archpkg $d >/dev/null
	     fi
  	     source $HOME/archpkg/$d
  	     get_child_pkg "${depends[@]}"
     	   done
  	new=`expr 1 + $loop`
  	loop=$new
	# echo "LOOP : $loop"
}

function get_alias
{
	[ "$1" = "libkeyutils.so" ] && pkg="keyutils"
	[ "$1" = "libcom_err.so" ] && pkg="e2fsprogs"
	[ "$1" = "libss.so" ] && pkg="e2fsprogs"
	[ "$1" = "libverto-module-base" ] && pkg="libverto"
	[ "$1" = "libverto.so" ] && pkg="libverto"
	[ "$1" = "libjpeg" ] && pkg="libjpeg-turbo"
	[ "$1" = "libjpeg.so" ] && pkg="libjpeg-turbo"
	[ "$1" = "libattr.so" ] && pkg="attr"
	[ "$1" = "libsysprof-capture" ] && pkg="sysprof"
	[ "$1" = "libidn2.so" ] && pkg="libidn2"
	[ "$1" = "gobject-introspection-runtime" ] && pkg="gobject-introspection"
	[ "$1" = "libreadline.so" ] && pkg="readline"
	[ "$1" = "libcups" ] && pkg="cups"
	[ "$1" = "libcolord" ] && pkg="colord"
	[ "$1" = "libncursesw.so" ] && pkg="ncurses"
	[ "$1" = "libexpat" ] && pkg="expat"
	[ "$1" = "libexpat.so" ] && pkg="expat"
	[ "$1" = "libldap" ] && pkg="openldap"
	[ "$1" = "libfreetype.so" ] && pkg="freetype2"
	[ "$1" = "util-linux-libs" ] && pkg="util-linux"
}

function ready_to_build
{
 depends=$@
#echo "DEPENDS : / $depends /"
for i in $depends
do
    for j in "${donotbuild[@]}"
    do
      notfound=1
      # echo " j -> $j / i-> $i ??"
      [ "$j" = "$i" ] && notfound=0 && break
    done
    [ "$notfound" = "1" ] && return 1
done

 [ "$notfound" = "1" ] && return 1
 return 0
}

function get_special_pkg
{
for i in "${donotbuild[@]}"
do
#    echo "$i / $1 ?"
    if [ "$i" = "$1" ] ; then
	    echo "Skip $1"
        return 0
    fi
done
 # echo "Pkg : $1"
 return 1
}

# destruction des variables d'environnement citées
unset CLEARENV XDG_DATA_DIRS PKG_CONFIG_PATH CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH PYTHONPATH PERL PYTHON

# $1 est supposée être une ISO particulière demandée passée en paramètre, lanpower, par exemple: pourquoi est-ce "uclib" ici ? 
# Sinon, La ligne 14 "echo $SRC_PATH/list-$1" donne n'importe quoi
[ "$1" = "uclib" ] && export CC=$HOME/ydfs/x-tools/i386-unknown-linux-uclibc/bin/i386-unknown-linux-uclibc-gcc
# initialisation du chemin pour le compilateur C x86
[ "$CARCH" = "x86" ] && [ "$CC" = "" ] && export CC=`which gcc`

# initialisation de variables
export ACLOCAL="aclocal"
export SHELL=/bin/bash
export ACLOCAL_FLAGS=" -I $HOME/$MODULE/share/aclocal/  -I $HOME/$CARCH/share/aclocal/"
# création d'un répertoire
# initialisations des variables utilisées 
export CXX="g++"
export CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH:/$HOME/$MODULE/lib:$HOME/$CARCH/lib CMAKE_INCLUDE_PATH=$CMAKE_INCLUDE_PATH:$HOME/$MODULE/include:$HOME/$CARCH/include
export CFLAGS="$CFLAGS -O2 -I. -I""$HOME/$MODULE/include -I$HOME/ydfs/CFLAGS"
export CPPFLAGS="$CPPFLAGS -I""$HOME/$MODULE/include -I$HOME/ydfs/CPPFLAGS"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$MODULE/include -I$HOME/ydfs/CXXFLAGS"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$CARCH/include"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$CARCH/include/AL"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$CARCH/irrlicht"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$CARCH/include/freetype2"
export LDFLAGS="$LDFLAGS -L""$HOME/$MODULE/lib "
export LDFLAGS="$LDFLAGS -L""$HOME/$MODULE/lib64 "
export GTKMM_BASEPATH=$HOME/$CARCH
# autres initialisations selon les architectures(processeurs)
[ "$CARCH" = "arm" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$CARCH/lib -Wl,-rpath-link,/home/raspi/ydfs/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/arm-linux-gnueabihf/lib" # FIXME
[ "$CARCH" = "x86" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/lib"
[ "$CARCH" = "x86_64" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/lib64 -Wl,-rpath-link,$HOME/$MODULE/lib"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/$MODULE/lib"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$HOME/$MODULE/lib/pkgconfig/:$HOME/$MODULE/share/pkgconfig/"
MODULEPATH="$HOME/$MODULE/bin/:$HOME/$MODULE/sbin/:$MODULEPATH"
export XDG_DATA_DIRS="$HOME/$MODULE/share/:$XDG_DATA_DIRS"

# echo "SET PATH"
if [ "$CARCH" = "arm" ]
then
PATH=$PWD:$PATH
else
PATH=$PWD:$HOME/Qt5/5.4/gcc/bin:$MODULEPATH:$PATH:
fi
PATH=$HOME/ydfs/llvm-clang/bin/:$PATH
# build tar
whoami | grep root && export FORCE_UNSAFE_CONFIGURE=1

# initialisation de différents variables pour la compilation
if [ -e "$HOME/$CARCH/bin/python3" ]
then
  export PYTHONPATH=$DIBAB_PREFIX/$CARCH/lib/python3.10/site-packages:$DIBAB_PREFIX/$MODULE/lib/python3.10/site-packages
  export PYTHON=$HOME/$CARCH/bin/python3
fi
export MAKE=`which make` MSGFMT=`which msgfmt` MSGMERGE=`which msgmerge` XGETTEXT=`which xgettext`

export PYTHON_PREFIX=$DIBAB_PREFIX/$MODULE/
export LIB_CUPS=$DIBAB_PREFIX/$CARCH/lib
export CUPS_ETC=$DIBAB_PREFIX/$CARCH/etc

[ -e $HOME/ydfs-error ] && rm $HOME/ydfs-error

#$HOME_DIBAB/scripts/first-env
LIST=$SRC_PATH/$MODULE.list
readarray -t PACKAGE < $LIST || exit $?
COUNT=0
for i in ${!PACKAGE[*]}
do 
  PKGURL=${PACKAGE[i]}
  COUNT=`echo $((COUNT + 1))`
  [ $COUNT = 1 ] && MAX=`cat $LIST|wc -l`
  echo 
  echo -n "$COUNT / $MAX : "
  echo "$PKGURL" | grep "#END-$DISTRONAME" && break
  echo "$PKGURL" | grep "#SKIP-$DISTRONAME" && continue
  echo "$PKGURL" | grep "#SKIP-""$CARCH""#" && continue
  echo "$PKGURL" | grep "#Games" && export DBEXTRA="games"
  echo "$PKGURL" | grep "#Education" && export DBEXTRA="education"
  echo "$PKGURL" | grep "#Office" && export DBEXTRA="office"
  echo "$PKGURL" | grep "#Drivers" && export DBEXTRA="drivers"
  echo "$PKGURL" | grep "#Libs" && export DBEXTRA="libs"
  echo "$PKGURL" | grep "#Emulators" && export DBEXTRA="emulators"
  echo "$PKGURL" | grep "#Network" && export DBEXTRA="network"
  echo "$PKGURL" | grep "#Printer" && export DBEXTRA="printer"
  echo "$PKGURL" | grep "#Multimedia" && export DBEXTRA="multimedia"
  echo "$PKGURL" | grep "#System" && export DBEXTRA="system"
  echo "$PKGURL" | grep "#Misc" && export DBEXTRA="misc"
  echo "$ARCHIVE" | grep '#tag' >/dev/null || ARCHIVE_URL=`echo $ARCHIVE | cut -d'#' -f1`
  echo "$ARCHIVE" | grep '#commit' >/dev/null || ARCHIVE_URL=`echo $ARCHIVE | cut -d'#' -f1`
  echo "$ARCHIVE" | grep '#tag' >/dev/null && ARCHIVE_URL=`echo $ARCHIVE`
  echo "$ARCHIVE" | grep '#commit' >/dev/null && ARCHIVE_URL=`echo $ARCHIVE`
  PKGURL_URL=`echo $PKGURL | cut -d'#' -f1`
  [ "$PKGURL_URL" = "" ] && continue
  PKG=`echo $PKGURL | cut -d':' -f2`
  export PACKAGE_NAME=$PKG
  if [  -n "`echo $PKGURL | grep 'archsource:'`" ] 
then
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/packages/$PKG ] && echo "$HOME/ydfs/packages/$PKG exists" && continue
  $HOME_DIBAB/scripts/get-archpkg $PKG
  $HOME_DIBAB/scripts/build-archpkg || exit $?
  exit 0
fi
[ -e $HOME/.archpatches ] && rm $HOME/.archpatches
  if [  -n "`echo $PKGURL | grep 'archlinuxpatched:'`" ] 
then
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/packages/$PKG ] && echo "$HOME/ydfs/packages/$PKG exists" && continue
  $HOME_DIBAB/scripts/get-archpkg $PKG
  # $HOME_DIBAB/scripts/scripts/get-all-archpkg-patches $PKG
  PKGURL=`$HOME_DIBAB/scripts/echo-archpkg $PKG`
  echo "Arch linux source for $PKG : $PKGURL_URL = $PKGURL"
fi
  if [  -n "`echo $PKGURL | grep 'archlinux:'`" ] 
then
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/packages/$PKG ] && echo "$HOME/ydfs/packages/$PKG exists" && continue
  PKGURL=`$HOME_DIBAB/scripts/echo-archpkg $PKG`
  echo "Arch linux source for $PKG : $PKGURL_URL ($PKGURL)"
		build_from_url 
fi

if [  -n "`echo $PKGURL | grep 'archlastbuild:'`" ] 
then
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/packages/$PKG ] && echo "$HOME/ydfs/packages/$PKG exists" && continue
  PKGURL=`$HOME_DIBAB/scripts/echo-archpkg $PKG`
  echo "Arch linux source for $PKG : $PKGURL_URL ($PKGURL)"
  source $HOME/archpkg/$PKG
  get_child_pkg "${depends[@]}"
fi

done


if [ ! -e /$HOME/$CARCH/include/ladspa.h ] && [ "$CARCH" != "arm" ]
then
    cd $HOME/ydfs/src
    cp -fR $HOME_DIBAB/ladspa_sdk .
    cd ladspa_sdk/src
    mkdir ../plugins
    mkdir ../bin
    make
fi

echo > $HOME/$CARCH/buildenv
for ENV in LD_LIBRARY_PATH LIB_CUPS PATH CUPS_ETC XDG_DATA_DIRS PYTHONPATH
do
  echo 'echo $'"$ENV" > $HOME/.printenv
  echo "export $ENV=`sh $HOME/.printenv`" >> $HOME/$CARCH/buildenv
done
[ ! -e $HOME/$MODULE/buildok ] && touch $HOME/$MODULE/buildok # usefull to know which file can be wrotten into $HOME/$MODULE/ after last package build
echo "Build packages OK"
