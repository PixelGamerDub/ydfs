#!/bin/bash

if [ -e LICENSE.chromium_os ] && [ ! -e qtwebengine.pro ]
then

  BUILDFROMSLACK=OK

  if [ "$BUILDFROMSLACK" = "OK" ] 
  then
  echo "Get from Slackware .. sorry !"

  VERSION=105.0.5195.52
  if [ "$ARCH" = "x86_64" ]
  then
    CPUARCH=x86_64
     [ ! -e chromium-$VERSION-$CPUARCH-1alien.txz ] && wget http://www.slackware.com/~alien/slackbuilds/chromium/pkg64/15.0/chromium-$VERSION-$CPUARCH-1alien.txz
  else
    CPUARCH=i586
     [ ! -e chromium-$VERSION-$CPUARCH-1alien.txz ] && wget http://www.slackware.com/~alien/slackbuilds/chromium/pkg/15.0/chromium-$VERSION-$CPUARCH-1alien.txz
  fi
     [ ! -e chromium-$VERSION-$CPUARCH-1alien.txz ] && exit 2
     [ ! -e usr ] && tar xJvf chromium-$VERSION-$CPUARCH-1alien.txz
     [ ! -e usr ] && exit 1 

  install -d $PREFIX
  cp -fR usr/share/* $PREFIX/share
  mv usr/lib64 $PREFIX/lib
  mv usr/lib $PREFIX/
  mkdir $PREFIX/bin
  ln -s $PREFIX/lib/chromium/chromium $PREFIX/bin
  sed -i \
    -e "s@/usr/bin/chromium@chromium@g" \
    "$PREFIX/share/applications/chromium.desktop"

  touch buildok-$ARCH
  exit 0 
  fi


  if [ ! -e out/Release/chrome ]
  then
# BoringSSL
#[ -e $HOME/$ARCH/include/openssl ] && mv $HOME/$ARCH/include/openssl $HOME/$ARCH/include/openssl-disabled
[ -e $HOME/$ARCH/lib/python3.8/site-packages/pygments ] && mv $HOME/$ARCH/lib/python3.8/site-packages/pygments $HOME/$ARCH/lib/python3.8/site-packages/pygments-disabled

# cp -fR $HOME/ydfs/src/protobuf-*/* third_party/protobuf/
cp -fR $HOME/ydfs/src/ffmpeg-4*/* third_party/ffmpeg/
cp -fR $HOME/ydfs/src/fontconfig-*/* third_party/fontconfig/src/ || exit 1

sleep 2

gn_system_libraries=(
		ffmpeg
		flac
		fontconfig
		freetype
		libdrm
		libjpeg
		libwebp
		libxml
		libxslt
		opus
		snappy
	)

build/linux/unbundle/replace_gn_files.py --system-libraries "${gn_system_libraries[@]}" || exit 1

sed -i '/fPIC/a  ldflags += [ "-L'$HOME"/"$ARCH'/lib" ]' build/config/compiler/BUILD.gn

install -d third_party/llvm-build
# ln -s /usr third_party/llvm-build/Release+Asserts

ln -s $HOME/$ARCH/bin/java third_party/jdk/current/bin/java

# echo ninja -C out/Release chrome 
#  bash
#  python build/linux/unbundle/replace_gn_files.py --system-libraries flac libjpeg libxml libevent libwebp libxslt opus    || exit 1
#  python third_party/libaddressinput/chromium/tools/update-strings.py || exit 1

  _flags=(
'custom_toolchain="//build/toolchain/linux/unbundle:default"'
'host_toolchain="//build/toolchain/linux/unbundle:default"'
'clang_use_chrome_plugins=false'
'treat_warnings_as_errors=false'
'fieldtrial_testing_like_official_build=true'
'ffmpeg_branding="Chrome"'
'proprietary_codecs=true'
'rtc_use_pipewire=true'
'link_pulseaudio=true'
'use_gnome_keyring=false'
'use_sysroot=false'
'use_custom_libcxx=false'
'enable_hangout_services_extension=true'
'enable_widevine=true'
'use_vaapi=true'
'enable_nacl=false'
'google_api_key="AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM"'
)

  export CC=clang
  export CXX=clang++
  export AR=ar
  export NM=nm

  CFLAGS+='   -Wno-builtin-macro-redefined'
  CXXFLAGS+=' -Wno-builtin-macro-redefined'
  CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='


    # Mimic exclude_unwind_tables=true
    CFLAGS+='   -fno-unwind-tables -fno-asynchronous-unwind-tables'
    CXXFLAGS+=' -fno-unwind-tables -fno-asynchronous-unwind-tables'
    CPPFLAGS+=' -DNO_UNWIND_TABLES'

	mkdir -p third_party/node/linux/node-linux-x64/bin && ln -sf $HOME/$ARCH/bin/node third_party/node/linux/node-linux-x64/bin/
	echo "Bootstrap.py" 
	python tools/gn/bootstrap/bootstrap.py --gn-gen-args "${_flags[*]}" || exit 1
	out/Release/gn gen out/Release --args="${_flags[*]}" || exit 1
	ninja -C out/Release chrome chrome_sandbox chromedriver || exit 100


  fi

  _launcher_ver=8
  wget https://github.com/foutrelis/chromium-launcher/archive/v$_launcher_ver.tar.gz || exit 1
  tar xzvf  v$_launcher_ver.tar.gz
  cd chromium-launcher-$_launcher_ver
  make PREFIX=$PREFIX install || exit 1
  cd ..

  install -D out/Release/chrome "$PREFIX/lib/chromium/chromium"
  install -Dm4755 out/Release/chrome_sandbox "$PREFIX/lib/chromium/chrome-sandbox"
  ln -s $PREFIX/lib/chromium/chromedriver "$PREFIX/bin/chromedriver"

  install -Dm644 chrome/installer/linux/common/desktop.template \
    "$PREFIX/share/applications/chromium.desktop"
  install -Dm644 chrome/app/resources/manpage.1.in \
    "$PREFIX/share/man/man1/chromium.1"
  sed -i \
    -e "s/@@MENUNAME@@/Chromium/g" \
    -e "s/@@PACKAGE@@/chromium/g" \
    -e "s/@@USR_BIN_SYMLINK_NAME@@/chromium/g" \
    "$PREFIX/share/applications/chromium.desktop" 
  sed -i \
    -e "s@/usr/bin/chromium@chromium@g" \
    "$PREFIX/share/applications/chromium.desktop" 

  cp \
    out/Release/{chrome_{100,200}_percent,resources}.pak \
    out/Release/{*.bin,chromedriver,*.so} \
    "$PREFIX/lib/chromium/"
  install -Dm644 -t "$PREFIX/lib/chromium/locales" out/Release/locales/*.pak
  install -Dm755 -t "$PREFIX/lib/chromium/swiftshader" out/Release/swiftshader/*.so

  if [[ -z ${_system_libs[icu]+set} ]]; then
    cp out/Release/icudtl.dat "$PREFIX/lib/chromium/"
  fi

#  ldd /home/linuxconsole2022/chromium/lib/chromium/chromium |grep not |cut -d' ' -f1|while read file
#do
#   cp /home/linuxconsole2022/ydfs/src/chromium-91.0.4472.77/out/Release/$file $PREFIX/lib/chromium/
#done

  for size in 22 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      "$PREFIX/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      "$PREFIX/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  touch buildok-$ARCH
  exit 0 
fi
# fi
