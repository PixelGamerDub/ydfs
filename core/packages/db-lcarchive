#/bin/bash
#ce script détermine l'action à faire selon le type de fichier ou d'archive
#il n'y a pas ici le cas du git://

. $HOME_DIBAB/scripts/includes/build

if [ "$1" = "--help" ] || [ "$1" = "" ]
then
  echo "USAGE : db-lcarchive (choice=view,decompress,installfromsrc,install) ARCHIVE"
  exit 0
fi

#création et initialisation du répertoire temporaire
install -d /$HOME/ydfs/tmp

FILE=$1
if [ -n "`echo $1 | grep ftp`" ] || [ -n "`echo $1 | grep http`" ]
then
  #si c'est un .dsc(Debian source) alors
  if [ -n "`echo $1 | grep '.dsc'`" ] 
  then
    echo "Run  db-build-debian-dsc $1"
    # FIXME [ -e $HOME/ydfs/tarballs/`basename $1` ] && echo -n "$HOME/ydfs/tarballs/`basename $1` exists" && exit 0
    db-build-debian-dsc $1 || exit 1
    exit 0
  fi
  #sinon, on le télécharge par wget+initialisations et changement de répertoire
  echo "wget $1 inside $0"
  install -d $HOME/ydfs/tarballs && cd $HOME/ydfs/tarballs && FILE=$PWD/`basename $1` && [ ! -e `basename $1` ] && wget $1
fi

if [ -n "$LCARCHIVE_CHOICE" ]
then
  CHOICE="$LCARCHIVE_CHOICE"
else
  echo "Specify a choice .."
  exit 1
fi

[ ! -n "$CHOICE" ] && exit 0
DIR=`echo $FILE |  sed 's/\.[^\.]*$//'`
DIR2=`basename $FILE |  sed 's/\.[^\.]*$//'`

# echo "File is $FILE"

#initialisation de la variable ARCHIVE selon le type de fichier
case "$FILE" in
  *.dsc)  ARCHIVE=DSC;;
  *.vbox-extpack)  ARCHIVE=vbox-extpack;;
*tar)  ARCHIVE=TAR;;
   *rar)  ARCHIVE=RAR;;
 *.7z) ARCHIVE=SEVENZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
   *.xz) ARCHIVE=TARXZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
   *.txz) ARCHIVE=TARXZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
 *.tbz2) ARCHIVE=TARBZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
   *.tar.bz2) ARCHIVE=TARBZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
 *.tar.gz) ARCHIVE=TARGZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
 *.tar.lz) ARCHIVE=TARLZ; DIR=`echo $DIR | sed 's/\.[^\.]*$//'`; DIR2=`echo $DIR2 | sed 's/\.[^\.]*$//'`;;
   *bz2)  ARCHIVE=BZ;;
 *deb)  ARCHIVE=DEB;;
   *rpm)  ARCHIVE=RPM;;
 *zip)  ARCHIVE=ZIP;;
   *.tgz)  ARCHIVE=TARGZ;;
   *.run)  ARCHIVE=RUN; DIR=`basename $FILE | sed 's/\.[^\.]*$//'`;;
 *)     ;;
esac

FORCED=0

#initialisations spécifiques de la variable DIR2 pour des cas particuliers
#(à modifier s'il y a des changements de versions)

[ -e $HOME_DIBAB/data/fixdirs/$(basename $FILE) ] && . $HOME_DIBAB/data/fixdirs/$(basename $FILE)
echo "$FILE" |grep libclc && DIR2=libclc-0~git20140101 && FORCED=1
echo "$FILE" |grep xvidcore && DIR2=xvidcore && FORCED=1
#echo "$FILE" |grep x264 && DIR2=x264-snapshot-20141218-2245 && FORCED=1
echo "$FILE" |grep x11-xserver-utils && DIR2=x11-xserver-utils && FORCED=1
echo "$FILE" |grep surge-src-1.1.0.tar.gz && DIR2=surge && FORCED=1
echo "$FILE" |grep firefox-100.0.1 && DIR2=firefox-100.0.1 && FORCED=1
echo "$FILE" |grep firefox-82.0.2 && DIR2=firefox-82.0.2 && FORCED=1
echo "$FILE" |grep firefox-78.15.0esr.source && DIR2=firefox-78.15.0 && FORCED=1
echo "$FILE" |grep x11-xkb-utils && DIR2=x11-xkb-utils && FORCED=1
echo "$FILE" |grep glm-0.9 && DIR2=glm && FORCED=1
echo "$FILE" |grep libatomic_ops-7_4 && DIR2=libatomic_ops-libatomic_ops-7_4_4 && FORCED=1
echo "$FILE" |grep xbmc-13.1 && DIR2=xbmc-13.1-Gotham && FORCED=1
echo "$FILE" |grep xonotic && DIR2=Xonotic && FORCED=1
echo "$FILE" |grep  "supertuxkart-0.8.1-src.tar.bz2" && DIR2=SuperTuxKart-0.8.1 && FORCED=1
echo "$FILE" |grep  "supertuxkart-0.9.1" && DIR2=supertuxkart-0.9.1 && FORCED=1
echo "$FILE" |grep  "supertuxkart-0.9.2" && DIR2=supertuxkart-0.9.2 && FORCED=1
echo "$FILE" |grep  "EO-1.2" && DIR2="eo" && FORCED=1
echo "$FILE" |grep  "spring" && DIR2="spring_98.0" && FORCED=1
echo "$FILE" |grep  "vim-7.4" && DIR2=vim74 && FORCED=1
echo "$FILE" |grep  "dossizola" && DIR2=dossizola-1.0 && FORCED=1
echo "$FILE" |grep  "SFML-2.3.2-sources" && DIR2=SFML-2.3.2 && FORCED=1
echo "$FILE" |grep  "astromenace-src-1.3.2" && DIR2=AstroMenace && FORCED=1
echo "$FILE" |grep  "warsow" && DIR2=source/source && FORCED=1 && export LOCALBASE=$HOME/$ARCH
echo "$FILE" |grep  "usbutils_005" && DIR2=usbutils-005 && FORCED=1
echo "$FILE" |grep  "hedgewars-src-0.9.21" && DIR2=hedgewars-src-0.9.21 && FORCED=1
echo "$FILE" |grep  "xmoto-0.5.11-src" && DIR2=xmoto-0.5.11 && FORCED=1
echo "$FILE" |grep  "audacity-minsrc-2.0.5" && DIR2=audacity-src-2.0.5 && FORCED=1
echo "$FILE" |grep  "libusb_0.1.12" && DIR2=libusb-0.1.12 && FORCED=1
echo "$FILE" |grep  "attr-2.4.47" && DIR2=attr-2.4.47 && FORCED=1
echo "$FILE" |grep  "acl-2.2.52" && DIR2=acl-2.2.52 && FORCED=1
echo "$FILE" |grep  "Box2D_v2" && DIR2=Box2D_v2.3.0 && FORCED=1
echo "$FILE" |grep  "tcl8.6.1" && DIR2=tcl8.6.1 && FORCED=1
echo "$FILE" |grep  "cups-1.7.1" && DIR2=cups-1.7.1 && FORCED=1
echo "$FILE" |grep  "cups-2.0.2" && DIR2=cups-2.0.2 && FORCED=1
echo "$FILE" |grep  "firefox-65.0.1.source" && DIR2=firefox-65.0.1 && FORCED=1
echo "$FILE" |grep  "firefox-102.15.0esr.source" && DIR2=firefox-102.15.0 && FORCED=1
echo "$FILE" |grep  "jpegsrc" && DIR2=jpeg-8 && FORCED=1
echo "$FILE" |grep  "libpaper_1.1.24+nmu2" && DIR2=libpaper-1.1.24+nmu2 && FORCED=1
echo "$FILE" |grep  "pa_stable" && DIR2=portaudio && FORCED=1
# echo -n " Archive is $ARCHIVE "

[ "$FORCED" = "1" ] && echo && echo " $FILE -> $DIR2" 

#actions à mener selon le type d'ARCHIVE et le type d'installation
case "$ARCHIVE" in
  RUN)
    echo "$FILE" |grep -i nvidia && DIR=$DIR $HOME_DIBAB/scripts/includes/nvidia && exit 0
	echo "How extract $FILE ?"
      exit 1
    ;;
  BZ)
    bzip2 -d "$FILE"  
    ;;
  GZ)
    gunzip "$FILE"  
    ;;
  TAR)
    ;;
  TARGZ)
    if [ "$CHOICE" = "decompress" ]
    then
      if [ -e $PREFIX/$DIR2 ] 
      then
        echo "$PREFIX/$DIR2 exists"
      else
        echo "tar xzvf $FILE --directory=$MYPREFIX" && tar xzvf "$FILE" --directory=$MYPREFIX 1> $HOME/ydfs/tmp/tar.$$.log
        [ ! -e $MYPREFIX/$DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u` && echo "DIR2 was $DIR2"
      fi
    fi
    if [ "$CHOICE" = "installfromsrc" ]
    then
      install -d $HOME/ydfs/src/
      cd $HOME/ydfs/src/
      if [ ! -e $DIR2 ]
      then
        echo $FILE
        tar xzvf "$FILE" 1> $HOME/ydfs/tmp/tar.$$.log || exit $?
      fi
      # [ ! -e $DIR2 ] && echo "ERROR : What DIR2 for $FILE ? " 
      [ ! -e $DIR2 ] && DIR2=`cat /$HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u` && install -d $HOME_DIBAB/data/fixdirs && echo "DIR2=$DIR2 && FORCED=1" > $HOME_DIBAB/data/fixdirs/$(basename $FILE) # && git -C $HOME_DIBAB add data/fixdirs/$(basename $FILE)
      cd $DIR2
      export DIR2=$DIR2
      export MYPREFIX=$MYPREFIX
      export LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS"
      build_ydfs_package
    fi
    ;;
  ZIP)
    if [ "$CHOICE" = "installfromsrc" ]
    then
      install -d $HOME/ydfs/src/
      cd $HOME/ydfs/src/
      #echo "$FILE" |grep  "wxWidgets-3" && DIR2="wxWidgets-3" && install -d $DIR2 && cd $DIR2
      echo "$FILE" |grep  "wxWidgets-3" && DIR2="wxWidgets"
      [ ! -e $DIR2 ] && unzip -o "$FILE" 1>/$HOME/ydfs/tmp/zip.$$.log && tail -10 /$HOME/ydfs/tmp/zip.$$.log
      if [ "$DIR2" = "amd-driver-installer-catalyst-13.1-legacy-linux-x86.x86_64" ]
      then
        DESTDIR=$HOME/ydfs/packages-$ARCH/$MYDIR $HOME_DIBAB/scripts/install-catalyst13.sh || exit $?
        cd $HOME/ydfs/packages-$ARCH/catalyst13
        $HOME_DIBAB/scripts/make_opkg || exit $?
        exit 0
      fi
      # [ ! -e $DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u`
      [ ! -e $DIR2 ] && echo "ERROR : What DIR2 for $FILE ? " && sleep 1 && DIR2=`cat /$HOME/ydfs/tmp/zip.$$.log  | cut -d':' -f2 | cut -d'/' -f1 | sort -u | tac | head -1`
      cd $DIR2
      export DIR2
      export MYPREFIX=$MYPREFIX
      export LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS"
      build_ydfs_package
    fi
    ;;
  RPM)
    install -d "$DIR" && cd "$DIR"
    alien -g "$FILE"
    ;;
  DEB)
    install -d "$DIR" && cd "$DIR"
    PKGNAME=`basename $DIR|cut -d'+' -f1`
    #if [ ! -e $HOME/ydfs/packages-$ARCH/$PKGNAME ]
    if [ ! -e $HOME/ydfs/packages-$ARCH/$PKGNAME ]
    then
      install -d $HOME/ydfs/packages-$ARCH/$PKGNAME
      dpkg -x "$FILE" $HOME/ydfs/packages-$ARCH/$PKGNAME
      cd $HOME/ydfs/packages-$ARCH/$PKGNAME
      $HOME_DIBAB/scripts/make_opkg || exit $?
      echo "Prefix is $MYPREFIX"
      install -d $MYPREFIX
      dpkg -x "$FILE" $MYPREFIX
    fi
    ;;
  RAR)
    ;;
  SEVENZ)
    if [ "$CHOICE" = "installfromsrc" ]
    then
      install -d $HOME/ydfs/src/
      cd $HOME/ydfs/src/
      [ ! -e $DIR2 ] && 7z x "$FILE" 1> $HOME/ydfs/tmp/tar.$$.log
      [ ! -e $DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u`
      cd $DIR2 
      export DIR2=$DIR2
      export MYPREFIX=$MYPREFIX
      export LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS"
      build_ydfs_package
    fi
    ;;
  TARLZ)
    if [ "$CHOICE" = "installfromsrc" ]
    then
      install -d $HOME/ydfs/src/
      cd $HOME/ydfs/src/
      [ ! -e $DIR2 ] && tar --lzip -xvf "$FILE" 1> $HOME/ydfs/tmp/tar.$$.log
      [ ! -e $DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u`
      cd $DIR2 
      export DIR2=$DIR2
      export MYPREFIX=$MYPREFIX
      export LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS"
      build_ydfs_package
    fi
    ;;
  vbox-extpack)
	install -d $MYPREFIX/extpack
	cp "$FILE" $MYPREFIX/extpack
    ;;
  TARXZ)
    if [ "$CHOICE" = "decompress" ]
    then
      if [ -e $PREFIX/$DIR2 ] 
      then
        echo "$PREFIX/$DIR2 exists"
      else
        echo "tar xJvf $FILE --directory=$MYPREFIX" && tar xJvf "$FILE" --directory=$MYPREFIX 1> $HOME/ydfs/tmp/tar.$$.log
        [ ! -e $MYPREFIX/$DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u` && echo "DIR2 was $DIR2"
      fi
    fi
    if [ "$CHOICE" = "installfromsrc" ]
    then
      install -d $HOME/ydfs/src/
      cd $HOME/ydfs/src/
      [ ! -e $DIR2 ] && tar xJvf "$FILE" 1> $HOME/ydfs/tmp/tar.$$.log
      [ ! -e $DIR2 ] && DIR2=`tail $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u`
      cd $DIR2 
      export DIR2=$DIR2
      export MYPREFIX=$MYPREFIX
      export LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS"
      build_ydfs_package
    fi
    ;;
  TARBZ)
    if [ "$CHOICE" = "decompress" ]
    then
      if [ -e $PREFIX/$DIR2 ] 
      then
        echo "$PREFIX/$DIR2 exists"
      else
        echo "tar xjvf $FILE --directory=$MYPREFIX" && tar xjvf "$FILE" --directory=$MYPREFIX 1> $HOME/ydfs/tmp/tar.$$.log
        [ ! -e $MYPREFIX/$DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u` && echo "DIR2 was $DIR2"
      fi
    fi
    if [ "$CHOICE" = "installfromsrc" ]
    then
      install -d $HOME/ydfs/src/
      cd $HOME/ydfs/src/
      echo "$FILE" |grep  "midori" && DIR2="midori" && install -d $DIR2 && cd $DIR2
      [ ! -e $DIR2 ] && echo "tar xjvf $FILE" && tar xjvf "$FILE" 1> $HOME/ydfs/tmp/tar.$$.log
      [ ! -e $DIR2 ] && DIR2=`cat $HOME/ydfs/tmp/tar.$$.log | cut -d'/' -f1 | sort -u`
      [ "$DIR2" != "midori" ] && cd $DIR2 
      export DIR2=$DIR2
      export MYPREFIX=$MYPREFIX
      export LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS"
      build_ydfs_package
    fi
    ;;
  DSC)
    export MYPREFIX=$MYPREFIX
    # FIXME [ -e $HOME/ydfs/tarballs/`basename $1` ] && echo -n "$HOME/ydfs/tarballs/`basename $1` exists" && exit 0
    echo "Run  db-build-debian-dsc $1"
    db-build-debian-dsc $1 || exit $?
    ;;
  *)
    echo "Archive format not recognized."
    echo "$FILE cannot be opened with db-lcarchive" 
    exit 4
    ;;
esac 
