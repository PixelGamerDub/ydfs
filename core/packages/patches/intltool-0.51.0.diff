diff -Naur intltool-0.51.0.orig/intltool-update.in intltool-0.51.0/intltool-update.in
--- intltool-0.51.0.orig/intltool-update.in	2015-03-09 02:39:54.000000000 +0100
+++ intltool-0.51.0/intltool-update.in	2017-07-21 22:35:10.613631420 +0200
@@ -1062,13 +1062,13 @@
 	}
     }
 
-    if ($str =~ /^(.*)\${?([A-Z_]+)}?(.*)$/)
+    if ($str =~ /^(.*)\$\{?([A-Z_]+)}?(.*)$/)
     {
 	my $rest = $3;
 	my $untouched = $1;
 	my $sub = "";
         # Ignore recursive definitions of variables
-        $sub = $varhash{$2} if defined $varhash{$2} and $varhash{$2} !~ /\${?$2}?/;
+        $sub = $varhash{$2} if defined $varhash{$2} and $varhash{$2} !~ /\$\{?$2}?/;
 
 	return SubstituteVariable ("$untouched$sub$rest");
     }
@@ -1190,10 +1190,10 @@
 	$name    =~ s/\(+$//g;
 	$version =~ s/\(+$//g;
 
-	$varhash{"PACKAGE_NAME"} = $name if (not $name =~ /\${?AC_PACKAGE_NAME}?/);
-	$varhash{"PACKAGE"} = $name if (not $name =~ /\${?PACKAGE}?/);
-	$varhash{"PACKAGE_VERSION"} = $version if (not $name =~ /\${?AC_PACKAGE_VERSION}?/);
-	$varhash{"VERSION"} = $version if (not $name =~ /\${?VERSION}?/);
+	$varhash{"PACKAGE_NAME"} = $name if (not $name =~ /\$\{?AC_PACKAGE_NAME}?/);
+	$varhash{"PACKAGE"} = $name if (not $name =~ /\$\{?PACKAGE}?/);
+	$varhash{"PACKAGE_VERSION"} = $version if (not $name =~ /\$\{?AC_PACKAGE_VERSION}?/);
+	$varhash{"VERSION"} = $version if (not $name =~ /\$\{?VERSION}?/);
     }
 
     if ($conf_source =~ /^AC_INIT\(([^,\)]+),([^,\)]+)[,]?([^,\)]+)?/m)
@@ -1219,11 +1219,11 @@
 	$version =~ s/\(+$//g;
         $bugurl  =~ s/\(+$//g if (defined $bugurl);
 
-	$varhash{"PACKAGE_NAME"} = $name if (not $name =~ /\${?AC_PACKAGE_NAME}?/);
-	$varhash{"PACKAGE"} = $name if (not $name =~ /\${?PACKAGE}?/);
-	$varhash{"PACKAGE_VERSION"} = $version if (not $name =~ /\${?AC_PACKAGE_VERSION}?/);
-	$varhash{"VERSION"} = $version if (not $name =~ /\${?VERSION}?/);
-        $varhash{"PACKAGE_BUGREPORT"} = $bugurl if (defined $bugurl and not $bugurl =~ /\${?\w+}?/);
+	$varhash{"PACKAGE_NAME"} = $name if (not $name =~ /\$\{?AC_PACKAGE_NAME}?/);
+	$varhash{"PACKAGE"} = $name if (not $name =~ /\$\{?PACKAGE}?/);
+	$varhash{"PACKAGE_VERSION"} = $version if (not $name =~ /\$\{?AC_PACKAGE_VERSION}?/);
+	$varhash{"VERSION"} = $version if (not $name =~ /\$\{?VERSION}?/);
+        $varhash{"PACKAGE_BUGREPORT"} = $bugurl if (defined $bugurl and not $bugurl =~ /\$\{?\w+}?/);
     }
 
     # \s makes this not work, why?
diff -upr intltool-0.51.0-orig/intltool-update.in intltool-0.51.0/intltool-update.in
--- intltool-0.51.0-orig/intltool-update.in	2016-07-29 14:08:06.276987000 +0200
+++ intltool-0.51.0/intltool-update.in	2016-07-29 14:11:09.562126918 +0200
@@ -620,6 +620,14 @@ sub FindLeftoutFiles
 
     my @result;
 
+    # If the builddir is a subdir of srcdir, the list of files found will be prefixed with
+    # an additional prefix (e.g. "_build/sub" for automake 1.15 make distcheck). Try to
+    # handle that, by removing those matches as well.
+    my $absbuilddir = Cwd::abs_path("..\/");
+    my $abssrcdir = Cwd::abs_path("$SRCDIR/..");
+    # Check if builddir is a subdir of srcdir
+    my ($abspath,$relpath) = split /\s*$abssrcdir\/\s*/, $absbuilddir, 2;
+
     foreach (@buf_allfiles_sorted)
     {
         my $dummy = $_;
@@ -628,7 +636,10 @@ sub FindLeftoutFiles
         $srcdir =~ s#^../##;
         $dummy =~ s#^$srcdir/../##;
         $dummy =~ s#^$srcdir/##;
-        $dummy =~ s#_build/##;
+        if ($relpath)
+        {
+            $dummy =~ s#^$relpath/##;
+        }
 	if (!exists($in2{$dummy}))
 	{
 	    push @result, $dummy
From: Bernhard M. Wiedemann <bmwiedemann+intltool@suse.de>

avoid a race where some processes try to use a partial cache file
that is still being written to.
Note that we release the lock before load_cache,
because if we got the lock, the cache is already completely written
and it is OK to have multiple parallel readers

Index: intltool-0.51.0/intltool-merge.in
===================================================================
--- intltool-0.51.0.orig/intltool-merge.in
+++ intltool-0.51.0/intltool-merge.in
@@ -43,6 +43,7 @@ use Getopt::Long;
 use Text::Wrap;
 use File::Basename;
 use Encode;
+use Fcntl qw(:flock);
 
 my $must_end_tag      = -1;
 my $last_depth        = -1;
@@ -392,11 +393,14 @@ sub load_cache
 
 sub get_cached_translation_database
 {
+    open(my $lockfh, ">", "$cache_file.lock") or die $!;
+    flock($lockfh, LOCK_EX) or die "Could not lock '$cache_file.lock' - $!";
     my $cache_file_age = -M $cache_file;
     if (defined $cache_file_age) 
     {
         if ($cache_file_age <= &get_newest_po_age) 
         {
+            close($lockfh);
             &load_cache;
             return;
         }
@@ -404,6 +408,7 @@ sub get_cached_translation_database
     }
 
     &create_cache;
+    close($lockfh);
 }
 
 sub add_translation
From d328542bea50b9445c63cdf2454052392282a1ce Mon Sep 17 00:00:00 2001
From: Colin Walters <walters@verbum.org>
Date: Thu, 8 Oct 2015 16:25:47 -0400
Subject: [PATCH] intltool-merge: Create cache file atomically

It's going to be relatively common for build systems operating in
parallel to run multiple copies of `intltool-merge`, yet the cache
file is not created atomically (i.e. with the "open .tmp file and
rename()" dance).

I suspect (but have not yet determined conclusively) this is the cause
of some systemd build issues where translations don't appear in the
merged file.

Regardless, this patch can't hurt.
---
 intltool-merge.in | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/intltool-merge.in b/intltool-merge.in
index 1afa2a4..d1eba8f 100644
--- a/intltool-merge.in
+++ b/intltool-merge.in
@@ -371,9 +371,10 @@ sub create_cache
 
     &create_translation_database;
 
-    open CACHE, ">$cache_file" || die;
+    open CACHE, ">$cache_file" . ".tmp" || die;
     print CACHE join "\x01", %translations;
     close CACHE;
+    rename("$cache_file" . ".tmp", "$cache_file");
 }
 
 sub load_cache 
-- 
1.8.3.1

