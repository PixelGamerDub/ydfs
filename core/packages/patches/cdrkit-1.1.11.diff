diff --git a/genisoimage/eltorito.c b/genisoimage/eltorito.c
index b97bdf1..5d7c2d1 100644
--- a/genisoimage/eltorito.c
+++ b/genisoimage/eltorito.c
@@ -59,7 +59,7 @@ static	void	get_torito_desc(struct eltorito_boot_descriptor *boot_desc);
 static	void	fill_boot_desc(struct eltorito_defaultboot_entry *boot_desc_entry,
 										struct eltorito_boot_entry_info *boot_entry);
 void	get_boot_entry(void);
-void	new_boot_entry(void);
+void	new_boot_entry();
 static	int	tvd_write(FILE *outfile);
 
 
@@ -283,6 +283,7 @@ get_torito_desc(struct eltorito_boot_descriptor *boot_desc)
 	int			i;
 	int			offset;
 	struct eltorito_defaultboot_entry boot_desc_record;
+	struct eltorito_sectionheader_entry section_header;
 
 	memset(boot_desc, 0, sizeof (*boot_desc));
 	boot_desc->type[0] = 0;
@@ -317,7 +318,7 @@ get_torito_desc(struct eltorito_boot_descriptor *boot_desc)
 	 */
 	memset(&valid_desc, 0, sizeof (valid_desc));
 	valid_desc.headerid[0] = 1;
-	valid_desc.arch[0] = EL_TORITO_ARCH_x86;
+	valid_desc.arch[0] = first_boot_entry->arch;
 
 	/*
 	 * we'll shove start of publisher id into id field,
@@ -347,10 +348,53 @@ get_torito_desc(struct eltorito_boot_descriptor *boot_desc)
 	/* now write it to the virtual boot catalog */
 	memcpy(de2->table, &valid_desc, 32);
 
-	for (current_boot_entry = first_boot_entry, offset = sizeof (valid_desc);
-		current_boot_entry != NULL;
-		current_boot_entry = current_boot_entry->next,
-		offset += sizeof (boot_desc_record)) {
+	/* Fill the first entry, since it's special and already has the
+	 * matching header via the validation header... */
+	offset = sizeof (valid_desc);
+	current_boot_entry = first_boot_entry;
+
+	if (offset >= SECTOR_SIZE) {
+#ifdef	USE_LIBSCHILY
+		comerrno(EX_BAD, "Too many El Torito boot entries\n");
+#else
+		fprintf(stderr,	"Too many El Torito boot entries\n");
+		exit(1);
+#endif
+	}
+	fill_boot_desc(&boot_desc_record, current_boot_entry);
+	memcpy(de2->table + offset, &boot_desc_record,
+				sizeof (boot_desc_record));
+
+	offset += sizeof(boot_desc_record);
+
+	for (current_boot_entry = current_boot_entry->next;
+			current_boot_entry != NULL;
+			current_boot_entry = current_boot_entry->next) {
+		struct eltorito_sectionheader_entry section_header;
+
+		if (offset >= SECTOR_SIZE) {
+#ifdef	USE_LIBSCHILY
+			comerrno(EX_BAD,
+			"Too many El Torito boot entries\n");
+#else
+			fprintf(stderr,
+			"Too many El Torito boot entries\n");
+			exit(1);
+#endif
+		}
+
+		memset(&section_header, '\0', sizeof(section_header));
+		if (current_boot_entry->next)
+			section_header.headerid[0] = EL_TORITO_SECTION_HEADER;
+		else
+			section_header.headerid[0] = EL_TORITO_LAST_SECTION_HEADER;
+
+		section_header.arch[0] = current_boot_entry->arch;
+		set_721(section_header.num_entries, 1);
+
+		memcpy(de2->table + offset, &section_header,
+					sizeof(section_header));
+		offset += sizeof(section_header);
 
 		if (offset >= SECTOR_SIZE) {
 #ifdef	USE_LIBSCHILY
@@ -365,6 +409,8 @@ get_torito_desc(struct eltorito_boot_descriptor *boot_desc)
 		fill_boot_desc(&boot_desc_record, current_boot_entry);
 		memcpy(de2->table + offset, &boot_desc_record,
 					sizeof (boot_desc_record));
+		offset += sizeof (boot_desc_record);
+
 	}
 }/* get_torito_desc(... */
 
diff --git a/genisoimage/genisoimage.c b/genisoimage/genisoimage.c
index a5b0b46..8add1ac 100644
--- a/genisoimage/genisoimage.c
+++ b/genisoimage/genisoimage.c
@@ -47,6 +47,7 @@
 
 #include <mconfig.h>
 #include "genisoimage.h"
+#include "iso9660.h"
 #include <errno.h>
 #include <timedefs.h>
 #include <fctldefs.h>
@@ -523,6 +524,8 @@ static const struct ld_option ld_options[] =
 	'\0', NULL, "Set debug flag", ONE_DASH},
 	{{"eltorito-boot", required_argument, NULL, 'b'},
 	'b', "FILE", "Set El Torito boot image name", ONE_DASH},
+	{{"efi-boot", required_argument, NULL, 'e'},
+	'e', "FILE", "Set EFI boot image name", ONE_DASH},
 	{{"eltorito-alt-boot", no_argument, NULL, OPTION_ALT_BOOT},
 	'\0', NULL, "Start specifying alternative El Torito boot parameters", ONE_DASH},
 	{{"sparc-boot", required_argument, NULL, 'B'},
@@ -1502,6 +1505,7 @@ int main(int argc, char *argv[])
 			all_files = 0;
 			break;
 		case 'b':
+		case 'e':
 			do_sort++;		/* We sort bootcat/botimage */
 			use_eltorito++;
 			boot_image = optarg;	/* pathname of the boot image */
@@ -1517,6 +1521,10 @@ int main(int argc, char *argv[])
 #endif
 			}
 			get_boot_entry();
+			if (c == 'e')
+				current_boot_entry->arch = EL_TORITO_ARCH_EFI;
+			else
+				current_boot_entry->arch = EL_TORITO_ARCH_x86;
 			current_boot_entry->boot_image = boot_image;
 			break;
 		case OPTION_ALT_BOOT:
diff --git a/genisoimage/genisoimage.h b/genisoimage/genisoimage.h
index bbedfb0..76e5e21 100644
--- a/genisoimage/genisoimage.h
+++ b/genisoimage/genisoimage.h
@@ -293,6 +293,7 @@ struct deferred_write {
 struct eltorito_boot_entry_info {
 	struct eltorito_boot_entry_info *next;
 	char		*boot_image;
+	char		arch;
 	int		not_bootable;
 	int		no_emul_boot;
 	int		hard_disk_boot;
diff --git a/genisoimage/iso9660.h b/genisoimage/iso9660.h
index c74c2a9..c8b7a05 100644
--- a/genisoimage/iso9660.h
+++ b/genisoimage/iso9660.h
@@ -62,10 +62,14 @@ struct iso_volume_descriptor {
 #define	EL_TORITO_ARCH_x86	0
 #define	EL_TORITO_ARCH_PPC	1
 #define	EL_TORITO_ARCH_MAC	2
+#define	EL_TORITO_ARCH_EFI	0xef
 
 #define	EL_TORITO_BOOTABLE	0x88
 #define	EL_TORITO_NOT_BOOTABLE	0
 
+#define	EL_TORITO_SECTION_HEADER	0x90
+#define	EL_TORITO_LAST_SECTION_HEADER	0x91
+
 #define	EL_TORITO_MEDIA_NOEMUL	0
 #define	EL_TORITO_MEDIA_12FLOP	1
 #define	EL_TORITO_MEDIA_144FLOP	2
@@ -173,7 +177,7 @@ struct eltorito_validation_entry {
 struct eltorito_defaultboot_entry {
 	char boot_id			[ISODCL(1,    1)]; /* 711 */
 	char boot_media			[ISODCL(2,    2)];
-	char loadseg			[ISODCL(3,    4)]; /* 711 */
+	char loadseg			[ISODCL(3,    4)]; /* 712 */
 	char sys_type			[ISODCL(5,    5)];
 	char pad1			[ISODCL(6,    6)];
 	char nsect			[ISODCL(7,    8)];
@@ -181,6 +185,14 @@ struct eltorito_defaultboot_entry {
 	char pad2			[ISODCL(13,  32)];
 };
 
+/* El Torito Section Header Entry in boot catalog */
+struct eltorito_sectionheader_entry {
+	char headerid			[ISODCL(1,    1)]; /* 711 */
+	char arch			[ISODCL(2,    2)];
+	char num_entries		[ISODCL(3,    4)]; /* 711 */
+	char id				[ISODCL(5,   32)];
+};
+
 /*
  * XXX JS: The next two structures have odd lengths!
  * Some compilers (e.g. on Sun3/mc68020) padd the structures to even length.
--- cdrkit-1.1.11.orig/wodim/CMakeLists.txt
+++ cdrkit-1.1.11/wodim/CMakeLists.txt
@@ -10,14 +10,14 @@ SET(CDRECORD_COMMON_SRCS cd_misc.c defau
 INCLUDE(CheckIncludeFiles)
 
 #force libcap usage on Linux
-CHECK_INCLUDE_FILES("sys/capability.h" HAVE_SYS_CAPABILITY_H)
-IF(HAVE_SYS_CAPABILITY_H)
-	LIST(APPEND EXTRA_LIBS cap)
-ELSE(HAVE_SYS_CAPABILITY_H)
-   IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
-      MESSAGE(FATAL_ERROR "Error: found a Linux system but no libcap header. Install libcap-dev.")
-   ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
-ENDIF(HAVE_SYS_CAPABILITY_H)
+IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
+    CHECK_INCLUDE_FILES("sys/capability.h" HAVE_SYS_CAPABILITY_H)
+    IF(HAVE_SYS_CAPABILITY_H)
+        LIST(APPEND EXTRA_LIBS cap)
+    ELSE(HAVE_SYS_CAPABILITY_H)
+        MESSAGE(FATAL_ERROR "Error: found a Linux system but no libcap header. Install libcap-dev.")
+    ENDIF(HAVE_SYS_CAPABILITY_H)
+ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")
 
 LINK_DIRECTORIES(../librols ../libusal  ../libedc)
 
--- cdrkit-1.1.11.orig/Changelog
+++ cdrkit-1.1.11/Changelog
@@ -129,7 +129,7 @@ cdrkit (1.1.5.1) RELEASED; urgency=low
 
 cdrkit (1.1.5) RELEASED; urgency=low
 
-  * wodim: explicite warning and more grace time if user manually specifies a size
+  * wodim: explicit warning and more grace time if user manually specifies a size
     less than 301 sectors, which is likely to be a mistake from copy-pasting
     of genisoimage -print-size output and omitting the block factor
   * wodim: Native device name management directly in libusal now, the
@@ -202,7 +202,7 @@ cdrkit (1.1.2) RELEASED; urgency=low
 
   [ Eduard Bloch ]
   * stop confusion and bailing out if burnfree/burnproof options have been
-    explicitely specified
+    explicitly specified
   * be move carefull with -dummy when the DVD media may not support it
   * extracting drive's default speed in attach_mdvd()
   * automatic recorder device guessing code, currently Linux-only
--- cdrkit-1.1.11.orig/genisoimage/genisoimage.c
+++ cdrkit-1.1.11/genisoimage/genisoimage.c
@@ -197,7 +197,7 @@ int	allow_lowercase = 0;	/* Allow lower
 int	allow_multidot = 0;	/* Allow more than on dot in filename */
 int	iso_translate = 1;	/* 1 == enables '#', '-' and '~' removal */
 int	allow_leading_dots = 0;	/* DOS cannot read names with leading dots */
-int	allow_limited_size = 0;	/* Let the user to allow the trick explicitely */
+int	allow_limited_size = 0;	/* Let the user to allow the trick explicitly */
 #ifdef	VMS
 int	use_fileversion = 1;	/* Use file version # from filesystem */
 #else
diff -up cdrkit-1.1.11/genisoimage/genisoimage.h.me cdrkit-1.1.11/genisoimage/genisoimage.h
--- cdrkit-1.1.11/genisoimage/genisoimage.h.me	2020-02-24 15:10:35.542998992 +0100
+++ cdrkit-1.1.11/genisoimage/genisoimage.h	2020-02-24 15:10:50.011130450 +0100
@@ -377,7 +377,7 @@ extern int	use_fileversion;
 extern int	split_SL_component;
 extern int	split_SL_field;
 extern char	*trans_tbl;
-char		*outfile;
+extern char	*outfile;
 
 #define	JMAX		64	/* maximum Joliet file name length (spec) */
 #define	JLONGMAX	103	/* out of spec Joliet file name length */
--- cdrkit-1.1.11.orig/3rd-party/geteltorito/README.geteltorito
+++ cdrkit-1.1.11/3rd-party/geteltorito/README.geteltorito
@@ -3,8 +3,8 @@ geteltorito
 
 Author: Rainer Krienke
 Email:  krienke@uni-koblenz.de
-License: GPL
-Version: 0.4
+License: GPL v2
+Version: 0.5
 Description: A El Torito boot image extractor
 
 call: 	geteltorito CD-image > toritoimagefile
--- cdrkit-1.1.11.orig/3rd-party/geteltorito/geteltorito.pl
+++ cdrkit-1.1.11/3rd-party/geteltorito/geteltorito.pl
@@ -11,10 +11,16 @@ use Getopt::Std;
 # License: GPL
 #
 # Get latest version from:
-# http://www.uni-koblenz.de/~krienke/ftp/noarch/geteltorito
+# http://userpages.uni-koblenz.de/~krienke/ftp/noarch/geteltorito
 #
-$utilVersion="0.4"; 
+$utilVersion="0.5"; 
 #
+# Version 0.5
+#    2009/06/22
+#    A patch for harddisk emulation images from <colimit@gmail.com>.
+#    For BootMediaType=4 (harddisk emulation) SectorCount is always 1, and geteltorito.pl
+#    returns just MBR. This patch guesses the correct bootimage size
+#    from MBR (offset+size of the first partitition).
 # Version 0.4
 #    2007/02/01
 #    A patch from Santiago Garcia <manty@debian.org> to use a virtual sector
@@ -31,9 +37,7 @@ $utilVersion="0.4";
 #    Initial release
 #
 # For information on El Torito see 
-# http://wikipedia.org/
-# or try this link directly:
-# http://www.phoenix.com/en/Customer+Services/White+Papers-Specs/Platform+System+Software+Documents/default.htm
+# http://en.wikipedia.org/wiki/El_torito
 
 $vSecSize=512;
 $secSize=2048;
@@ -179,19 +183,22 @@ if( $media == 0 ){
 }
 if( $media == 1 ){
 	print STDERR "1.2meg floppy";
-       $count=1200*1024/$vSecSize;  
+        $count=1200*1024/$vSecSize;  
 }
 if( $media == 2 ){
 	print STDERR "1.44meg floppy";
-       $count=1440*1024/$vSecSize;  
+        $count=1440*1024/$vSecSize;  
 }
 if( $media == 3 ){
 	print STDERR "2.88meg floppy";
-       $count=2880*1024/$vSecSize;  
+        $count=2880*1024/$vSecSize;  
 }
 if( $media == 4 ){
 	print STDERR "harddisk";
-	$count=0;
+	$MBR=getSector($imgStart, 1, $imageFile );
+	$partition1=substr($MBR, 446, 16);
+	($unUsed, $firstSector, $partitionSize) = unpack( "A8VV", $partition1);
+	$count=$firstSector + $partitionSize;
 }
 print STDERR "\n";
 
