diff --git a/base/allocator/partition_allocator/starscan/write_protector.cc b/base/allocator/partition_allocator/starscan/write_protector.cc
index cb0d0b0..098cfe3 100644
--- a/base/allocator/partition_allocator/starscan/write_protector.cc
+++ b/base/allocator/partition_allocator/starscan/write_protector.cc
@@ -101,13 +101,6 @@ void UserFaultFDWPSet(int uffd,
                       UserFaultFDWPMode mode) {
   PA_DCHECK(0 == (begin % SystemPageSize()));
   PA_DCHECK(0 == (length % SystemPageSize()));
-
-  uffdio_writeprotect wp;
-  wp.range.start = begin;
-  wp.range.len = length;
-  wp.mode =
-      (mode == UserFaultFDWPMode::kProtect) ? UFFDIO_WRITEPROTECT_MODE_WP : 0;
-  PA_PCHECK(-1 != ioctl(uffd, UFFDIO_WRITEPROTECT, &wp));
 }
 }  // namespace
 
diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 1f2fa42..dd27737 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -431,6 +431,8 @@ ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
+ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
+ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
     cflags += [ "-fPIC" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
@@ -442,6 +444,8 @@ ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
+ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
+ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
     ldflags += [ "-fPIC" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
@@ -453,6 +457,8 @@ ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
+ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
+ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 ldflags += [ "-L/home/linuxconsole2022/x86_64/lib" ]
 
     if (!is_clang) {
@@ -1548,7 +1554,7 @@ config("default_warnings") {
     # Suppress warnings about ABI changes on ARM (Clang doesn't give this
     # warning).
     if (current_cpu == "arm" && !is_clang) {
-      cflags += [ "-Wno-psabi" ]
+    #  cflags += [ "-Wno-psabi" ]
     }
 
     if (!is_clang) {
@@ -1631,7 +1637,7 @@ config("default_warnings") {
           # An ABI compat warning we don't care about, https://crbug.com/1102157
           # TODO(thakis): Push this to the (few) targets that need it,
           # instead of having a global flag.
-          "-Wno-psabi",
+          # "-Wno-psabi",
 
           # Ignore warnings about MSVC optimization pragmas.
           # TODO(thakis): Only for no_chromium_code? http://crbug.com/912662
@@ -1650,7 +1656,7 @@ config("default_warnings") {
           "-Wno-deprecated-copy",
 
           # TODO(https://crbug.com/1050281): Clean up, enable.
-          "-Wno-non-c-typedef-for-linkage",
+          # "-Wno-non-c-typedef-for-linkage",
         ]
 
         cflags_c += [
@@ -1658,12 +1664,6 @@ config("default_warnings") {
           "-Wno-implicit-fallthrough",
         ]
 
-        if (enable_wmax_tokens) {
-          cflags += [ "-Wmax-tokens" ]
-        } else {
-          # TODO(https://crbug.com/1049569): Remove after Clang 87b235db.
-          cflags += [ "-Wno-max-tokens" ]
-        }
       }
     }
   }
diff --git a/chrome/browser/ui/startup/bad_flags_prompt.cc b/chrome/browser/ui/startup/bad_flags_prompt.cc
index d27d0ea..5a38a8c 100644
--- a/chrome/browser/ui/startup/bad_flags_prompt.cc
+++ b/chrome/browser/ui/startup/bad_flags_prompt.cc
@@ -181,22 +181,6 @@ void ShowBadFlagsInfoBarHelper(content::WebContents* web_contents,
 void ShowBadFlagsPrompt(content::WebContents* web_contents) {
 // On Android, ShowBadFlagsPrompt doesn't show the warning notification
 // for flags which are not available in about:flags.
-#if !defined(OS_ANDROID)
-  for (const char* flag : kBadFlags) {
-    if (base::CommandLine::ForCurrentProcess()->HasSwitch(flag)) {
-      ShowBadFlagsInfoBar(web_contents, IDS_BAD_FLAGS_WARNING_MESSAGE, flag);
-      return;
-    }
-  }
-#endif  // OS_ANDROID
-
-  for (const base::Feature* feature : kBadFeatureFlagsInAboutFlags) {
-    if (base::FeatureList::IsEnabled(*feature)) {
-      ShowBadFlagsInfoBarHelper(web_contents, IDS_BAD_FEATURES_WARNING_MESSAGE,
-                                feature->name);
-      return;
-    }
-  }
 }
 
 void ShowBadFlagsInfoBar(content::WebContents* web_contents,
diff --git a/chrome/browser/ui/startup/bad_flags_prompt.cc b/chrome/browser/ui/startup/bad_flags_prompt.cc
index ea855a4..c8272d8 100644
--- a/chrome/browser/ui/startup/bad_flags_prompt.cc
+++ b/chrome/browser/ui/startup/bad_flags_prompt.cc
@@ -185,12 +185,6 @@ void ShowBadFlagsPrompt(content::WebContents* web_contents) {
 void ShowBadFlagsInfoBar(content::WebContents* web_contents,
                          int message_id,
                          const char* flag) {
-  std::string switch_value =
-      base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(flag);
-  if (!switch_value.empty())
-    switch_value = "=" + switch_value;
-  ShowBadFlagsInfoBarHelper(web_contents, message_id,
-                            std::string("--") + flag + switch_value);
 }
 
 void MaybeShowInvalidUserDataDirWarningDialog() {
